ig.module( 
	'game.main' 
)
.requires(
	'impact.game',
	'impact.font',  
  //'impact.debug.debug',
  'game.entities.player'
  
)
.defines(function(){




MyGame = ig.Game.extend({

	gravity:50,
  
  // user defined
  map: [],
  cmap:[],
  
	score: 0,
  hiscore: 0,
  newhiscore: false,
  
	tiles: new ig.Image( 'media/tiles.png' ),
  fontscore: new ig.Font( 'media/04b03.font.png' ),
  fontstatus: new ig.Font( 'media/04b03.font.png'),
  player: null,
  
	init: function()
  {
		// Initialize your game here; bind keys etc.
    ig.input.bind(32, 'space');
    ig.game.clearColor = '#e5ddac';//'#eff3ff';
    this.fontscore.fscale = 4;
    //this.fontstatus.fscale = 2;
    
		// The first part of the map is always the same
		this.map = [ //10x47
      [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],  // 9        
      [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
      [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
      [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
      [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
      [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
			[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
			[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
			[4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4],
      
			[5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4], // 8
			[6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
      [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
      [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
      [1, 3, 1, 4, 0, 0, 0, 0, 0, 0, 4],
			[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
			[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
			[4, 0, 0, 0, 4, 3, 4, 2, 4, 4, 4],
			[5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
			[6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
      
			[4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4], // 7
      [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
			[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
      [4, 0, 0, 1, 2, 2, 2, 2, 1, 2, 4],
      [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
			[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
			[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
			[4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
      
			[5, 4, 4, 4, 3, 0, 0, 0, 0, 0, 4], // 6
			[6, 4, 1, 4, 2, 0, 0, 0, 0, 0, 4],
      [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
      [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
      [1, 0, 0, 0, 0, 0, 0, 4, 4, 1, 4],
			[2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4],
			[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
			[4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
			[5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
			[6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
      
      [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4], // 5
      [4, 2, 2, 2, 2, 2, 1, 0, 0, 0, 4],
      [1, 2, 2, 5, 4, 4, 0, 0, 0, 0, 4],
			[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
			[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
			[4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
			[5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
			[6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
			[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
      [2, 0, 0, 0, 0, 4, 4, 2, 2, 2, 4],
      
      [4, 0, 0, 0, 0, 4, 3, 2, 2, 2, 4], // 4
      [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
			[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
			[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3],
			[4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8],
			[5, 1, 2, 3, 2, 6, 0, 0, 0, 0, 4],
			[4, 3, 3, 2, 1, 0, 0, 0, 0, 0, 4],
			[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
      [2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4],
      
      [4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4], // 3
      [4, 0, 0, 0, 0, 0, 0, 0, 2, 4, 4],
      [1, 0, 0, 0, 0, 0, 0, 8, 2, 1, 4],
			[2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4],
			[3, 0, 0, 0, 0, 0, 0, 3, 4, 4, 4],
			[4, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4],
			[5, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4],
			[4, 0, 0, 0, 0, 0, 0, 0, 3, 5, 4],
			[2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4],
      [4, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4],
      
			[4, 3, 0, 0, 0, 0, 0, 0, 0, 4, 4], // 1
      [4, 2, 0, 0, 0, 0, 0, 0, 0, 4, 4],
      [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 4],
			[2, 1, 0, 0, 0, 0, 0, 0, 0, 4, 4],
			[3, 3, 0, 0, 0, 0, 0, 0, 0, 4, 4],
			[4, 2, 0, 0, 0, 0, 0, 0, 0, 4, 4],
			[5, 3, 0, 0, 0, 0, 0, 0, 0, 8, 4],
			[3, 4, 0, 0, 0, 0, 0, 0, 0, 5, 4],
			[2, 4, 0, 0, 0, 0, 0, 0, 0, 1, 4],
			[4, 4, 2, 4, 5, 3, 4, 4, 3, 4, 4]
		];
    this.cmap = [ //10x47 
			[1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ,1], // 9
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 1 ,1],
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
			[1, 0, 0, 0, 1, 1, 1, 1, 1, 1 ,1],
      
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1], // 8
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
      [1, 1, 1, 1, 0, 0, 0, 0, 0, 0 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
			[1, 0, 0, 0, 1, 1, 1, 1, 1, 1 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
      
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1], // 7
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
      [1, 0, 0, 1, 1, 1, 1, 1, 1, 1 ,1],
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
      
			[1, 1, 1, 1, 1, 0, 0, 0, 0, 0 ,1], // 6
			[1, 1, 1, 1, 1, 0, 0, 0, 0, 0 ,1],
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
      [1, 0, 0, 0, 0, 0, 0, 1, 1, 1 ,1],
			[1, 0, 0, 0, 0, 0, 0, 1, 1, 1 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
      
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1], // 5
      [1, 1, 1, 1, 1, 1, 1, 0, 0, 0 ,1],
      [1, 1, 1, 1, 1, 1, 0, 0, 0, 0 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
      [1, 0, 0, 0, 0, 1, 1, 1, 1, 1 ,1],
      
      [1, 0, 0, 0, 0, 1, 1, 1, 1, 1 ,1], // 4
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
			[1, 1, 1, 1, 1, 1, 0, 0, 0, 0 ,1],
			[1, 1, 1, 1, 1, 0, 0, 0, 0, 0 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,1],
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 1 ,1],
      
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 1 ,1], // 3
      [1, 0, 0, 0, 0, 0, 0, 0, 1, 1 ,1],
      [1, 0, 0, 0, 0, 0, 0, 1, 1, 1 ,1],
			[1, 0, 0, 0, 0, 0, 0, 1, 1, 1 ,1],
			[1, 0, 0, 0, 0, 0, 0, 1, 1, 1 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 1, 1 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 1, 1 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 1, 1 ,1],
			[1, 0, 0, 0, 0, 0, 0, 0, 0, 1 ,1],
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 1 ,1],
      
  
      
      [1, 1, 0, 0, 0, 0, 0, 0, 0, 1 ,1], // 1
      [1, 1, 0, 0, 0, 0, 0, 0, 0, 1 ,1],
      [1, 1, 0, 0, 0, 0, 0, 0, 0, 1 ,1],
			[1, 1, 0, 0, 0, 0, 0, 0, 0, 1 ,1],
			[1, 1, 0, 0, 0, 0, 0, 0, 0, 1 ,1],
			[1, 1, 0, 0, 0, 0, 0, 0, 0, 1 ,1],
			[1, 1, 0, 0, 0, 0, 0, 0, 0, 1 ,1],
			[1, 1, 0, 0, 0, 0, 0, 0, 0, 1 ,1],
			[1, 1, 0, 0, 0, 0, 0, 0, 0, 1 ,1],
			[1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ,1]
		];
    
		// The map is used as CollisionMap AND BackgroundMap
		this.collisionMap = new ig.CollisionMap( 32, this.cmap );
		this.backgroundMaps.push( new ig.BackgroundMap(32, this.map, 'media/tiles.png' ) );
		
		this.player = this.spawnEntity( EntityPlayer, 160, this.cmap.length*32 - 32 );
//ig.log('cmap.length:'+this.cmap.length);
	},
	
  
	update: function()
  {
		// Update all entities and backgroundMaps
		this.parent();
	},
	
  
	draw: function()
  {
		// Draw all entities and backgroundMaps
		this.parent();
    
    var ts = Math.floor( (this.cmap.length*32-32-15 - this.player.pos.y)/8 );
    this.score = (ts > this.score) ? ts : this.score;
		this.fontscore.draw( this.score + 'm', 5, 5, ig.Font.ALIGN.LEFT );
    this.fontscore.fscale = 2;
    this.fontstatus.draw( 'hiscore:'+this.hiscore + 'm', 220, 12, ig.Font.ALIGN.RIGHT );
    this.fontscore.fscale = 4;
	}
  
  

  
});



  
  // START SCREEN
  ScreenStart = ig.Game.extend({
    fontinstruct:new ig.Font('media/04b03.font.png'),
    background:new ig.Image('media/screenstart.png'),
    
    init: function()
    {
      ig.input.bind(32,'start');
      this.fontinstruct.fscale = 1;
    },
    
    update:function()
    {
      if (ig.input.pressed('start'))
      {
        ig.system.setGame(MyGame)
      }
      this.parent();
    },
    
    draw:function()
    {
      this.parent();
      this.background.draw(0,0);
      var x = ig.system.width/2,
      y = ig.system.height - 10;
     
     this.fontinstruct.fscale = 3;
      this.fontinstruct.draw('The Minion Escapes',60,y-230,ig.Font.ALIGN.CENTER);
     this.fontinstruct.fscale = 1;
     
      this.fontinstruct.draw('Instructions:',x+10,y-120,ig.Font.ALIGN.LEFT);
      this.fontinstruct.draw('Keep Pressing the spacebar',x+10,y-110,ig.Font.ALIGN.LEFT);
      
      this.fontinstruct.draw('Credits:',x+10,y-50,ig.Font.ALIGN.LEFT);
      this.fontinstruct.draw('Sound by as3fxr',x+10,y-40,ig.Font.ALIGN.LEFT);
      this.fontinstruct.draw('Design Graphics Code by Louai',x+10,y-30,ig.Font.ALIGN.LEFT);
      
      this.fontinstruct.draw('Press Spacebar to Start',x,y,ig.Font.ALIGN.CENTER);
    }
  })

// Start the Game with 60fps, a resolution of 320x256, scaled 
// up by a factor of 2

ig.main( '#canvas', ScreenStart, 60, 275, 275, 2, ig.Loader );
//ig.main( '#canvas', MyGame, 60, 275, 275, 2, ig.Loader );

});
